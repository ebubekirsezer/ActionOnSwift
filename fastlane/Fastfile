default_platform(:ios)

DEVELOPER_APP_ID = ENV["DEVELOPER_APP_ID"]
DEVELOPER_APP_IDENTIFIER = ENV["DEVELOPER_APP_IDENTIFIER"]
DEVELOPER_PORTAL_TEAM_ID = ENV["DEVELOPER_PORTAL_TEAM_ID"]
PROVISIONING_PROFILE_SPECIFIER = ENV["PROVISIONING_PROFILE_SPECIFIER"]
PROVISIONING_PROFILE_SPECIFIER_MACOS = ENV["PROVISIONING_PROFILE_SPECIFIER_MACOS"]
TEMP_KEYCHAIN_USER = ENV["TEMP_KEYCHAIN_USER"]
TEMP_KEYCHAIN_PASSWORD = ENV["TEMP_KEYCHAIN_PASSWORD"]
APPLE_ISSUER_ID = ENV["APPLE_ISSUER_ID"]
APPLE_KEY_ID = ENV["APPLE_KEY_ID"]
APPLE_KEY_CONTENT = ENV["APPLE_KEY_CONTENT"]
GIT_AUTHORIZATION = ENV["GIT_AUTHORIZATION"]
EXPORT_OPTIONS = "./ExportPlist/ExportOptions.plist"
EXPORT_OPTIONS_iOS = "./ExportPlist/ExportOptions_iOS.plist"
OUTPUT_DIRECTORY = "./fastlane/builds"
IPA_FILE_PATH = "./fastlane/builds/ActionOnSwift.ipa"

def delete_temp_keychain(name)
  delete_keychain(
    name: name
  ) if File.exist? File.expand_path("~/Library/Keychains/#{name}-db")
end

def create_temp_keychain(name, password)
  create_keychain(
    name: name,
    password: password,
    unlock: false,
    timeout: 0
  )
end

def ensure_temp_keychain(name, password)
  delete_temp_keychain(name)
  create_temp_keychain(name, password)
end

platform :ios do

  lane :upload_macos do 
    keychain_name = TEMP_KEYCHAIN_USER
    keychain_password = TEMP_KEYCHAIN_PASSWORD
    ensure_temp_keychain(keychain_name, keychain_password)

    api_key = app_store_connect_api_key(
      key_id: APPLE_KEY_ID,
      issuer_id: APPLE_ISSUER_ID,
      key_content: APPLE_KEY_CONTENT,            
      duration: 1200,            
      in_house: false
    )

    increment_build_number(xcodeproj: "ActionOnSwift.xcodeproj")

    match(
      type: 'appstore',
      app_identifier: "#{DEVELOPER_APP_IDENTIFIER}",
      readonly: is_ci,
      git_basic_authorization: Base64.strict_encode64(GIT_AUTHORIZATION),
      keychain_name: keychain_name,
      keychain_password: keychain_password,
      api_key: api_key
    )

    gym(
      configuration: "Release",
      workspace: "ActionOnSwift.xcodeproj/project.xcworkspace",
      scheme: "ActionOnSwift",
      export_method: "app-store",
      export_options: EXPORT_OPTIONS
    )

    pilot(
      apple_id: "#{DEVELOPER_APP_ID}",
      app_identifier: "#{DEVELOPER_APP_IDENTIFIER}",
      skip_waiting_for_build_processing: true,
      skip_submission: true,
      distribute_external: false,
      notify_external_testers: false,
    )
  end

  lane :closed_beta do

    before_all do
      Dotenv.load ".env.ios"
    end

    keychain_name = TEMP_KEYCHAIN_USER
    keychain_password = TEMP_KEYCHAIN_PASSWORD
    ensure_temp_keychain(keychain_name, keychain_password)

    api_key = app_store_connect_api_key(
      key_id: APPLE_KEY_ID,
      issuer_id: APPLE_ISSUER_ID,
      key_content: APPLE_KEY_CONTENT,            
      duration: 1200,            
      in_house: false
    )

    increment_build_number(xcodeproj: "ActionOnSwift.xcodeproj")

    sync_code_signing(
      type: 'appstore',
      platform: "ios",
      app_identifier: "#{DEVELOPER_APP_IDENTIFIER}",
      readonly: is_ci,
      git_basic_authorization: Base64.strict_encode64(GIT_AUTHORIZATION),
      keychain_name: keychain_name,
      keychain_password: keychain_password,
      api_key: api_key
    ) # match

    build_ios_app(
        scheme: "ActionOnSwift (iOS)",
        output_directory: "./build-ios",
        sdk: "iphoneos",
        destination: "generic/platform=iOS",
        xcargs: "-allowProvisioningUpdates",
        export_method: "app-store",
        export_options: EXPORT_OPTIONS_iOS
    )

    # match(
    #   type: 'appstore',
    #   platform: "ios",
    #   app_identifier: "#{DEVELOPER_APP_IDENTIFIER}",
    #   readonly: is_ci,
    #   git_basic_authorization: Base64.strict_encode64(GIT_AUTHORIZATION),
    #   keychain_name: keychain_name,
    #   keychain_password: keychain_password,
    #   api_key: api_key
    # )

    # update_code_signing_settings(
    #   profile_name:PROVISIONING_PROFILE_SPECIFIER
    # )

    # build_ios_app(
    #   configuration: "Release",
    #   project: "ActionOnSwift.xcodeproj",
    #   scheme: "ActionOnSwift",
    #   destination: "generic/platform=iOS",
    #   archive_path: "./builds_2/ActionOnSwift.xcarchive",
    #   export_options: EXPORT_OPTIONS_iOS
    # )

    # pilot(
    #   apple_id: "#{DEVELOPER_APP_ID}",
    #   app_identifier: "#{DEVELOPER_APP_IDENTIFIER}",
    #   skip_waiting_for_build_processing: true,
    #   skip_submission: true,
    #   distribute_external: false,
    #   notify_external_testers: false,
    #   ipa: "./ActionOnSwift.ipa"
    # )

    # gym(
    #     project: "ActionOnSwift.xcodeproj",
    #     scheme: "ActionOnSwift",
    #     clean: false,
    #     silent: true,
    #     include_bitcode: false,
    #     include_symbols: false,
    #     skip_package_pkg: true,
    #     output_directory: OUTPUT_DIRECTORY,
    #     output_name: "ActionOnSwift.ipa",
    #     configuration: "Release",
    #     export_method: "app-store",
    #     export_options: {
    #       provisioningProfiles: { 
    #           DEVELOPER_APP_ID => PROVISIONING_PROFILE_SPECIFIER
    #       }
    #     }
    #   )

      # ipa(
      #   configuration: "Release",
      #   project: "ActionOnSwift.xcodeproj",
      #   scheme: "Release",
      #   output_directory: "./",
      #   output_name: "my-app.ipa",
      #   export_method: "app-store",
      #   export_options: {
      #     provisioningProfiles: { 
      #         DEVELOPER_APP_ID => PROVISIONING_PROFILE_SPECIFIER
      #     }
      #   }
      # )

    # build_app(
    #   workspace: "ActionOnSwift.xcodeproj/project.xcworkspace",
    #   scheme: "ActionOnSwift",
    #   configuration: "Release",
    #   skip_package_pkg: true,
    #   export_method: "app-store",
    #   export_options: {
    #     provisioningProfiles: { 
    #         DEVELOPER_APP_ID => PROVISIONING_PROFILE_SPECIFIER
    #     }
    #   }
    # )

    #Â upload_to_testflight

    # gym(
    #   workspace: "ActionOnSwift.xcodeproj/project.xcworkspace", 
    #   scheme: "ActionOnSwift",
    #   configuration: "Release",
    #   export_method: "app-store",
    #   export_options: {
    #     provisioningProfiles: { 
    #         DEVELOPER_APP_ID => PROVISIONING_PROFILE_SPECIFIER
    #     }
    #   }
    # )

    # pilot(
    #   apple_id: "#{DEVELOPER_APP_ID}",
    #   app_identifier: "#{DEVELOPER_APP_IDENTIFIER}",
    #   skip_waiting_for_build_processing: true,
    #   skip_submission: true,
    #   distribute_external: false,
    #   notify_external_testers: false,
    #   ipa: IPA_FILE_PATH
    # )
    delete_temp_keychain(keychain_name)
  end
end